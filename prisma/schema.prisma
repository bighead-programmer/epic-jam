// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  wallet        Wallet?
  betsCreated   Bet[]     @relation("BetCreator")
  betsReceived  Bet[]     @relation("BetOpponent")
  gameAccounts  GameAccount[]
  transactions  Transaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wallet {
  id            String        @id @default(cuid())
  userId        String        @unique
  balance       Float         @default(0)
  pendingAmount Float         @default(0)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Game {
  id          String        @id @default(cuid())
  name        String
  platform    String
  apiEndpoint String?
  apiKey      String?
  isActive    Boolean       @default(true)
  bets        Bet[]
  gameAccounts GameAccount[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model GameAccount {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  username  String
  apiToken  String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, gameId])
}

model Bet {
  id            String        @id @default(cuid())
  creatorId     String
  opponentId    String
  gameId        String
  amount        Float
  status        BetStatus     @default(PENDING)
  result        BetResult?
  paymentMethod PaymentMethod
  escrowId      String?       @unique
  creator       User          @relation("BetCreator", fields: [creatorId], references: [id])
  opponent      User          @relation("BetOpponent", fields: [opponentId], references: [id])
  game          Game          @relation(fields: [gameId], references: [id])
  escrow        Escrow?
  proofs        BetProof[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Escrow {
  id        String   @id @default(cuid())
  betId     String   @unique
  amount    Float
  status    EscrowStatus @default(PENDING)
  bet       Bet      @relation(fields: [betId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BetProof {
  id        String   @id @default(cuid())
  betId     String
  userId    String
  proofType ProofType
  proofUrl  String
  bet       Bet      @relation(fields: [betId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id            String           @id @default(cuid())
  userId        String
  walletId      String
  amount        Float
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  paymentMethod PaymentMethod
  reference     String?
  externalId    String?
  user          User             @relation(fields: [userId], references: [id])
  wallet        Wallet           @relation(fields: [walletId], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

enum BetStatus {
  PENDING
  ACCEPTED
  REJECTED
  IN_PROGRESS
  COMPLETED
  DISPUTED
  CANCELLED
}

enum BetResult {
  CREATOR_WON
  OPPONENT_WON
  DRAW
  CANCELLED
}

enum EscrowStatus {
  PENDING
  LOCKED
  RELEASED
  REFUNDED
}

enum ProofType {
  SCREENSHOT
  VIDEO
  API_RESULT
  MANUAL_CONFIRMATION
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BET_WIN
  BET_LOSS
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  ECOCASH
  PAYPAL
  WALLET
}
